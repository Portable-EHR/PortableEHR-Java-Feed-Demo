/*
 * Copyright Â© Portable EHR inc, 2021
 * https://portableehr.com/
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.portableehr.api;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.portableehr.network.server.request.appointment.AppointmentDispositionParameters;
import com.portableehr.network.server.request.appointment.AppointmentPullRequest;
import com.portableehr.network.server.request.patient.PatientReachabilityRequest;
import com.portableehr.network.server.request.patient.PatientPullRequest;
import com.portableehr.network.server.request.practitioner.PractitionerPullRequest;
import com.portableehr.network.server.request.privateMessage.PrivateMessageContentRequest;
import com.portableehr.network.server.request.privateMessage.PrivateMessageStatusRequest;
import com.portableehr.network.server.response.FeedApiResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

public interface FeedApi {
    @RequestMapping(value = "/feed/patient",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<? extends FeedApiResponse> feedPatientPost(@RequestBody PatientPullRequest patientPullRequest) throws JsonProcessingException;

    @RequestMapping(value = "/feed/patient/pehrReachability",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<? extends FeedApiResponse> feedPatientPehrReachabilityPost(@RequestBody PatientReachabilityRequest body) throws JsonProcessingException;

    @RequestMapping(value = "/feed/practitioner",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<? extends FeedApiResponse> feedPractitionerPost(@RequestBody PractitionerPullRequest practitionerPullRequest) throws JsonProcessingException;

    @RequestMapping(value = "/feed/privateMessage/content",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<? extends FeedApiResponse> feedPrivateMessageContentPost(@RequestBody PrivateMessageContentRequest privateMessageContentRequest) throws JsonProcessingException;

    @RequestMapping(value = "/feed/privateMessage/status",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<? extends FeedApiResponse> feedPrivateMessageStatusPost(@RequestBody PrivateMessageStatusRequest privateMessageStatusRequest) throws JsonProcessingException;

    @RequestMapping(value = "/feed/appointment",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<? extends FeedApiResponse> feedAppointmentPost(@RequestBody AppointmentPullRequest appointmentPullRequest) throws JsonProcessingException;

    @RequestMapping(value = "/feed/appointment/disposition",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<? extends FeedApiResponse> feedAppointmentDispositionPost(@RequestBody AppointmentDispositionParameters appointmentDispositionRequest) throws JsonProcessingException;
}

